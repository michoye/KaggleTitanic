---
title: "Kaggle Quarto"
format: html
date: last-modified
editor: visual
toc: true
author:
  - name: Michael Oyewale
    orcid: 0000-0002-0167-9604
  - name: Johannes Schwenke
    orcid: 0009-0006-9795-6181
  - name: Thomas Stojanov
    orcid: 0000-0001-8172-5326
---

## TODO

-   Split cabin

-   Think about imputation / try first imputation

-   Choice of pred model

## Log

### 2024-12-06

-   Data overview

-   Reformatting

## Setup

### Set of packages

```{r packages}
#| warning: false
#| message: false

if(!require("tidyverse")){
  install.packages("tidyverse")
  library("tidyverse")                                                       
  # packages that you’re likely to use in everyday data analyses: ggplot2, dplyr, tidyr, readr, tibble, stringr, readr, forcats
}

if(!require("naniar")){
  install.packages("naniar")
  library("naniar")                                                          
  # assess and visualize missingness
}

if(!require("Hmisc")){
  install.packages("Hmisc")
  library("Hmisc")                                                          
  # assess and visualize missingness
}

if(!require("skimr")){
  install.packages("skimr")
  library("skimr")                                                          
}

if(!require("tidymodels")){
  install.packages("tidymodels")
  library("tidymodels")                                                          
  # modelling
}
```

### Load data

Load data with read.csv

```{r load}
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")

# Example of what a submission file should look like
submission_example <- read.csv("data/gender_submission.csv")

train <- train |> 
  mutate(across(c("Survived", "Pclass", "Sex", "Embarked"), as.factor),
         Cabin = if_else(Cabin == "", NA, Cabin),
         Embarked = if_else(Embarked == "", NA, Embarked)) 
```

## Data inspection

```{r inspect}
train |> head()

train |> pull(Ticket) #what do the prefixes mean? Created a new column with just these prefixes to study at a later point
# Some tickets have 

#Extracts prefixes to new column Ticket_pre
train <- train %>%
  mutate(Ticket_pre = ifelse(str_detect(Ticket, " "), 
                           str_extract(Ticket, "^[^ ]+"), 
                           NA))

#Deletes prefixes from column Ticket
train <- train |> 
  mutate(Ticket = ifelse(str_detect(Ticket, " "), 
                         str_remove(Ticket, "^[^ ]+ "), 
                         Ticket))

# Some last issues remain
train <- train %>%
  mutate(
    Ticket_pre = ifelse(
      str_detect(Ticket, "\\s"),
      paste0(Ticket_pre, " ", str_extract(Ticket, "^[^\\s]+")),
      Ticket_pre
    ),
    Ticket = ifelse(
      str_detect(Ticket, "\\s"),
      str_extract(Ticket, "(?<=\\s).*"),
      Ticket
    )
  ) # Some last prefixes weren't extracted. 

train <- train %>%
  mutate(
    # Handle cases where Ticket equals "LINE"
    Ticket_pre = ifelse(Ticket == "LINE", "LINE", 
                        ifelse(str_detect(Ticket, "\\s"),
                               paste0(Ticket_pre, " ", str_extract(Ticket, "^[^\\s]+")),
                               Ticket_pre)),
    Ticket = ifelse(Ticket == "LINE", NA, 
                    ifelse(str_detect(Ticket, "\\s"),
                           str_extract(Ticket, "(?<=\\s).*"),
                           Ticket)),
    # Convert Ticket to numeric
    Ticket = as.numeric(Ticket)
  )




train |> pull(Ticket_pre) #See below for possible categorization and freq count

train |> pull(Cabin) #See below for possible categorization and freq count
train <- train |>
  mutate(Cabin_sector = ifelse(!is.na(Cabin), str_extract(Cabin, "[A-GT](?=[^A-GT]*$)"), NA)) # Extracts last occurrence of letter in Cabin string
# --> Sector is looked at below together with Pclass

train <- train %>%
  mutate(CabinNumber = ifelse(!is.na(Cabin), #only process non-NA values
                              sapply(str_extract_all(Cabin, "\\d+"), function(x) { 
                                # Iterates through the list of extracted numbers (x)
                                # "B23 B25 B27" → c("23", "25", "27")
                                if (length(x) > 0) {
                                  max(as.numeric(x)) # Calculate max() and convert to numeric format
                                } else {
                                  NA
                                }
                              }), 
                              NA)) #Extracted highest number from Cabin; NA if no number

train |> arrange(Name) |> pull(Name) #There are some additional names listed for some patients - Why is this? 
# (...) These names don't refer to other patients on the ship - don't know what these are
# \"...\" - most probably a nickname
# (\"...\") - don't know



# What to do with sibsp / parch?
# Should we have variable 'Family' (0/1) instead of sibsp / parch? 
# Or is one better for survival than the other? 
# E.g., will I be safer if I have siblings? Or will I be at a higher risk if I have a child to care after?

# sibsp: The dataset defines family relations in this way...
  # Sibling = brother, sister, stepbrother, stepsister
  # Spouse = husband, wife (mistresses and fiancés were ignored)
# parch: The dataset defines family relations in this way...
  # Parent = mother, father
  # Child = daughter, son, stepdaughter, stepson
  # Some children travelled only with a nanny, therefore parch=0 for them.
```

Structure of data frame

```{r inspect}
str(train)
```

```{r}
summary(train)
skim(train)
```

Histograms

```{r}
# Age in years
# Age is fractional if less than 1. 
# If the age is estimated, is it in the form of xx.5
# Move age_estimated to new column ?
hist(train$Age)

# Passenger fare
hist(train$Fare, breaks = 50)

# Nr of siblings / spouses aboard the Titanic
# The dataset defines family relations in this way...
# Sibling = brother, sister, stepbrother, stepsister
# Spouse = husband, wife (mistresses and fiancés were ignored)
hist(train$SibSp)

# Nr of parents / children aboard the Titanic
# The dataset defines family relations in this way...
# Parent = mother, father
# Child = daughter, son, stepdaughter, stepson
# Some children travelled only with a nanny, therefore parch=0 for them.
hist(train$Parch)
```

Frequency tables

```{r}
# For data$Sex
table(train$Sex, useNA = "ifany")

# For data$Pclass - A proxy for socio-economic status (SES)
table(train$Pclass, useNA = "ifany")

# For data$Embarked
table(train$Embarked, useNA = "ifany")

#for outcome (death)
table(train$Survived, useNA = "ifany")

#for outcome (cabin)
table(train$Cabin, useNA = "ifany")

#for newly created column 'Prefixes'
table(train$Ticket_pre, useNA = "ifany")
# Could theoretically clean this column.. 
# A./5., A.5., A/5, A/5. --> A/5
# SOTON/O.Q., SOTON/O2, SOTON/OQ, STON/O, STON/O2. --> SOTON 
# and so on... and see whether it correlates with anything... 
# Care: 665 missing values

train |> count(Pclass, Cabin_sector)
# Pclass doesn't necessarily separate Cabin_sector

train |> count(Pclass, Ticket_pre)
# No real relation here either - check again
```

Missing values

```{r}
gg_miss_var(train, show_pct = TRUE)


naplot(naclus(train))
```

## Data preprocessing

### Split cabin from room number

### Look at relationships cabin vs. class etc
